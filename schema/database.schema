// PostgreSQL Schema Definition
// This schema demonstrates various PostgreSQL types and relationships

extension pgcrypto (version='1.3')
extension postgis 
extension uuid-ossp

enum UserRole {
  ADMIN
  USER
  PUBLIC
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model User {
  id            UUID            @id @default(gen_random_uuid())
  email         VARCHAR(255)    @unique
  name          VARCHAR(150)
  role          UserRole        @default(USER)
  age           SMALLINT
  balance       INTEGER
  isActive      BOOLEAN         @default(true)
  createdAt     TIMESTAMP       @default(now())
  updatedAt     TIMESTAMP       @updatedAt
  profile       Profile?        @relation("UserProfile")
  orders        Order[]

   @@rowLevelSecurity(enabled: true, force: true)

   @@policy("userIsolation", {
    for: ["select", "update"],
    to: "Profile",
    using: "(userId = (SELECT current_setting('app.current_user_id')::integer));"
  })

  @@policy("adminAccess", {
    for: "all",
    to: "adminRole",
    using: "true"
  })

  @@trigger("BEFORE UPDATE", {
    level: "FOR EACH ROW",
    execute: """
    IF (OLD.balance <> NEW.balance) THEN
      RAISE EXCEPTION 'Balance cannot be updated directly';
    END IF;
    """
  })
  
  @@index([role, isActive])

  @@index([name], { 
    where: "isActive = true", 
    name: "active_users_name_idx", 
    type: "btree" 
  })

  @@index([email], { 
    unique: true, 
    where: "role = 'PUBLIC'" 
  })
  
}

model Profile {
  id            UUID            @id @default(gen_random_uuid())
  userId        UUID            @unique
  bio           TEXT
  avatar        VARCHAR(255)
  location      POINT
  user          User            @relation("UserProfile", fields: [userId], references: [id])
}

model Order {
  id            UUID            @id @default(gen_random_uuid())
  userId        UUID
  status        OrderStatus     @default(PENDING)
  totalAmount   DECIMAL(10,2)
  items         JSONB
  createdAt     TIMESTAMP       @default(now())
  updatedAt     TIMESTAMP       @updatedAt
  user          User            @relation(fields: [userId], references: [id])
  products      ProductOrder[]
  
  @@index([userId])
  @@index([status, createdAt], { name: "order_status_created_idx" })
}

model Product {
  id            UUID            @id @default(gen_random_uuid())
  name          VARCHAR(255)
  description   TEXT
  price         DECIMAL(10,2)
  stock         INTEGER
  category      VARCHAR(100)
  tags          TEXT[]
  metadata      JSONB
  createdAt     TIMESTAMP       @default(now())
  updatedAt     TIMESTAMP       @updatedAt
  orders        ProductOrder[]
  
  @@trigger("AFTER UPDATE", {
    level: "FOR EACH ROW",
    execute: """
    IF (OLD.stock <> NEW.stock) THEN
      INSERT INTO product_inventory_log(product_id, old_stock, new_stock, changed_at)
      VALUES (NEW.id, OLD.stock, NEW.stock, NOW());
    END IF;
    """
  })
  
  @@trigger("BEFORE UPDATE", {
    level: "FOR EACH ROW",
    execute: """
    IF (OLD.price <> NEW.price) THEN
      INSERT INTO product_price_history(product_id, old_price, new_price, changed_at)
      VALUES (OLD.id, OLD.price, NEW.price, NOW());
      
      -- Notify admin if price decreased by more than 25%
      IF (NEW.price < OLD.price * 0.75) THEN
        PERFORM pg_notify('price_alerts', 'Product ' || OLD.name || ' price decreased by more than 25%');
      END IF;
    END IF;
    """
  })
}

model ProductOrder {
  id            SERIAL          @id
  orderId       UUID
  productId     UUID
  quantity      INTEGER
  price         DECIMAL(10,2)
  order         Order           @relation(fields: [orderId], references: [id])
  product       Product         @relation(fields: [productId], references: [id])
} 

role logdUser {
  privileges: ["select", "insert", "update"] on User
}

role adminRole {
  privileges: "all" on User
}